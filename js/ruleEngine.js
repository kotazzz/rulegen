// js/ruleEngine.js\n\nconst RuleEngine = {\n\n    generate(generator, selectedOptions, ruleModuleStates) {\n        if (!generator) return \"Ошибка: Генератор не определен.\";\n\n        let output = \"\";\n        let ruleCounter = 1;\n\n        // 1. Введение (если включено и определено)\n        const introModuleId = generator.structure?.introModuleId;\n        if (introModuleId && ruleModuleStates[introModuleId] !== false && generator.ruleModules.find(m => m.id === introModuleId)) {\n            const introModule = generator.ruleModules.find(m => m.id === introModuleId);\n            if (this.checkConditions(introModule.conditions, selectedOptions)) {\n                 output += this.formatText(introModule.textTemplate, selectedOptions) + \"\\n\\n\";\n            }\n        }\n\n        // 2. Основные правила (нумерованные)\n        const mainRuleModules = generator.ruleModules.filter(m => m.type === 'main-rule' && m.id !== introModuleId && m.id !== generator.structure?.notesModuleId);\n\n        mainRuleModules.forEach(module => {\n            // Включен ли модуль пользователем?\n            if (ruleModuleStates[module.id] === false) return; // Skip if explicitly disabled\n\n            // Выполняются ли условия для показа модуля?\n            if (!this.checkConditions(module.conditions, selectedOptions)) return;\n\n            // Форматируем текст правила\n            const formattedText = this.formatText(module.textTemplate, selectedOptions);\n            output += `${ruleCounter}. ${formattedText}\\n\\n`;\n            ruleCounter++;\n        });\n\n        // 3. Примечания/Послесловие (если включено и определено)\n        const notesModuleId = generator.structure?.notesModuleId;\n        if (notesModuleId && ruleModuleStates[notesModuleId] !== false && generator.ruleModules.find(m => m.id === notesModuleId)) {\n             const notesModule = generator.ruleModules.find(m => m.id === notesModuleId);\n             if (this.checkConditions(notesModule.conditions, selectedOptions)) {\n                 // Обработка вложенных примечаний (если они есть и управляются отдельно)\n                 let notesContent = this.formatText(notesModule.textTemplate, selectedOptions);\n                 let noteCounter = 1;\n                 if (notesModule.subModules) {\n                     let subNotesText = \"\";\n                     notesModule.subModules.forEach(subModule => {\n                         if (ruleModuleStates[subModule.id] !== false && this.checkConditions(subModule.conditions, selectedOptions)) {\n                             subNotesText += `Примечание ${noteCounter}: ${this.formatText(subModule.textTemplate, selectedOptions)}\\n`;\n                             noteCounter++;\n                         }\n                     });\n                     // Заменяем плейсхолдер в основном тексте примечаний\n                     notesContent = notesContent.replace(/\\{\\{subNotes\\}\\}/g, subNotesText.trim());\n                 }\n                 output += notesContent + \"\\n\";\n             }\n        }\n\n        return output.trim();\n    },\n\n    /**\n     * Проверяет, выполняются ли условия для отображения модуля/опции.\n     * conditions: { sectionId: [allowedValue1, allowedValue2], sectionId2: allowedValue, ... }\n     * selectedOptions: { sectionId: selectedValue, sectionId2: [val1, val2], ... }\n     */\n    checkConditions(conditions, selectedOptions) {\n        if (!conditions) return true; // No conditions means always show\n\n        for (const sectionId in conditions) {\n            const requiredValues = Array.isArray(conditions[sectionId]) ? conditions[sectionId] : [conditions[sectionId]];\n            const actualValue = selectedOptions[sectionId];\n\n            if (actualValue === undefined || actualValue === null) return false; // Required section not selected\n\n            if (Array.isArray(actualValue)) {\n                // Check if there's any intersection between actual values and required values\n                if (!requiredValues.some(req => actualValue.includes(req))) {\n                    return false;\n                }\n            } else {\n                // Check if the single actual value is among the required ones\n                if (!requiredValues.includes(actualValue)) {\n                    return false;\n                }\n            }\n        }\n        return true; // All conditions met\n    },\n\n    /**\n     * Форматирует текст шаблона, заменяя плейсхолдеры вида {{sectionId}} или {{sectionId.optionValue}}.\n     * Пока простая замена, можно усложнить.\n     */\n    formatText(template, selectedOptions) {\n        if (!template) return \"\";\n        let result = template;\n\n        // Простая замена плейсхолдеров вида {{sectionId}}\n        result = result.replace(/\\{\\{([^}]+)\}\\}/g, (match, key) => {\n            const value = selectedOptions[key];\n            if (value !== undefined && value !== null) {\n                return Array.isArray(value) ? value.join(', ') : value;\n            }\n            return match; // Keep placeholder if value not found\n        });\n\n        // TODO: Добавить более сложную логику форматирования, если нужно\n        // Например, подстановку конкретных текстов в зависимости от значения опции\n\n        return result;\n    }\n};\n